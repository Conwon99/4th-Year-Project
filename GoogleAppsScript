    var CookCompleteCount = 0;
    var CurrentHeatingEvent = 1;
    var Output_Energy = 0;

function getSpreadsheetData()
{

}


function doGet(e) 
{ 

  Logger.log( JSON.stringify(e) );  // view parameters
  var result = 'Ok'; // assume success
  if (e.parameter == 'undefined') 
  {
    result = 'No Parameters';
  }
  else 
  {
    var sheet_id = '1SCO1O9fMxWu7AC_HnG8A52A0Kz4f5mPd_om0JT2VKTw'; 		// Spreadsheet ID
    var sheet = SpreadsheetApp.openById(sheet_id).getActiveSheet();		// get Active sheet
    var newRow = sheet.getLastRow() + 1;			  
	  

    //Logger.log(newRow.length);
    var timezone = SpreadsheetApp.getActive().getSpreadsheetTimeZone();
    var date = new Date();

  //  var time = date.getTime();
    var time = Utilities.formatDate(new Date(), "GMT", "HH:mm:ss")
   // var currentTime = date.getTime();

    var rowData = [];
    
    rowData[1] = date; 											// Timestamp in column A
    rowData[2] = time;




    for (var param in e.parameter) 
    {
      Logger.log('In for loop, param=' + param);
      var value = stripQuotes(e.parameter[param]);
      Logger.log(param + ':' + e.parameter[param]);
      switch (param) {
        case 'Vbat': //Parameter
          rowData[3] = value; //Value in column B

          var Vbat = value;
          result = 'Written on column B';
          break;

        case 'Iout': //Parameter
          rowData[4] = value; //Value in column C

          var Iout = value;
          result += ' ,Written on column D';
          break;  

        case 'Iin': //Parameter
          rowData[5] = value; //Value in column C
          result += ' ,Written on column C';
          break;  


        case 'Cooker': //Parameter
          rowData[18] = value; //Value in column C
          result += ' ,Written on column D';
          break;

        case 'Meal': //Parameter
          rowData[19] = value; //Value in column C
          result += ' ,Written on column D';
          break;

        case 'Portion': //Parameter
          rowData[20] = value; //Value in column C
          result += ' ,Written on column D';
          break;

        case 'Method': //Parameter
          rowData[21] = value; //Value in column C
          result += ' ,Written on column D';
          break;


        case 'CookComplete':

          var HeatingEventValueIndex = 0;

          if(value =="Yes")   // If cook completed
          {
            Output_Energy = 0;
            var startTime;
            var startRow;
            // Increment through Heating Event

                for (i = 1;i <newRow;i++)    // iterate through HeatingEventValues
                { 
                  var HeatingEventValue =  sheet.getRange(i+2,1).getValue(); // get cell value


                    if(HeatingEventValue == CurrentHeatingEvent)    //
                    {  // if on the same heating event

                      HeatingEventValueIndex++;

                      if (HeatingEventValueIndex ==1)     // If at start of range, get first value
                      {
                        
                       startRow = i+2;

                      }

                      var Pout_cellValue = sheet.getRange(i+2,8).getValue(); // gets value in watts

                      var Output_Energy = Output_Energy + Pout_cellValue;     //accumulate the watts to obtain Wh val

                    }
                      
                      

              
                }

           
          //Pout_cellValue = sheet.getRange(3,8).getValue();
          //var Output_Energy = Output_Energy + Pout_cellValue; 
          

          var dateCellval = sheet.getRange(startRow,2).getValue();

          var endTimeRowval = startRow + HeatingEventValueIndex -1; // use time before as timestamp hasnt been made
          var startDateCellval = sheet.getRange(startRow,2).getValue();
          var endDateCellval = sheet.getRange(endTimeRowval,2).getValue(); 

           // var endTimeCellval = sheet.getRange(17,2).getValue();

         var startTime = Utilities.formatDate(startDateCellval, "GMT", "HH:mm:ss");
         var endTime = Utilities.formatDate(endDateCellval, "GMT", "HH:mm:ss");  
         var date = Utilities.formatDate(startDateCellval, "GMT", "dd/MM/yyyy");  
          
          
          var MS_in_1_min = 60000;
          var time_diff = (Math.abs(endDateCellval - startDateCellval))/MS_in_1_min;

          // Set Heating Event Values
          //sheet.getRange(3,9).setValue(startRow); 
          //sheet.getRange(4,9).setValue(HeatingEventValueIndex); 
          //sheet.getRange(4,10).setValue(diff); 

          sheet.getRange(CurrentHeatingEvent+2,11).setValue(CurrentHeatingEvent); 
          sheet.getRange(CurrentHeatingEvent+2,17).setValue(Output_Energy/1000);

          sheet.getRange(CurrentHeatingEvent+2,12).setValue(date);
          sheet.getRange(CurrentHeatingEvent+2,13).setValue(startTime);
          sheet.getRange(CurrentHeatingEvent+2,14).setValue(endTime);
          sheet.getRange(CurrentHeatingEvent+2,15).setValue(time_diff);
          
          sheet.getRange(3,10).setValue("Test");
          Output_Energy = 0; // Set back to 0 for next heating event
          
          }  

          break;

         case 'NewHeatingEvent':

          if (value == 'Yes') 
          {
            CurrentHeatingEvent++; 
          }

        default:
          result = "unsupported parameter";
          
      }
    }


    
   // sheet.getRange(3,7).setValue(startTime); 
    

    rowData[0] = CurrentHeatingEvent;

    var P_out = Vbat*Iout;
    rowData[7] = P_out;


    Logger.log(JSON.stringify(rowData));
    // Write new row below
    var newRange = sheet.getRange(newRow, 1, 1, rowData.length); 
    newRange.setValues([rowData]);


var time_range = sheet.getRange(3,3,newRow,1);

var Voltagechart = sheet.getCharts()[0];
var Voltagechart_range = sheet.getRange(3,3,newRow,2);
var ranges = Voltagechart.getRanges();
Voltagechart = Voltagechart.modify();
ranges.forEach(function(Voltagechart_range) {Voltagechart.removeRange(Voltagechart_range)});
var modifiedChart = Voltagechart.addRange(Voltagechart_range).build();
sheet.updateChart(modifiedChart);


//Update Iout

var Iout_range = sheet.getRange(3,4,newRow,1);

var Ioutchart = sheet.getCharts()[1];
//var Ioutrange = sheet.getRange(3,2,newRow,1).getRange(3,4,newRow,1);
var ranges = Ioutchart.getRanges();
Ioutchart = Ioutchart.modify();
//ranges.forEach(function(Ioutrange) {Ioutchart.removeRange(time_range)});
Ioutchart.removeRange(ranges[0]);
Ioutchart.removeRange(ranges[1]);
var modifiedChart = Ioutchart.addRange(time_range).addRange(Iout_range).build();
sheet.updateChart(modifiedChart);



//Update Pout

var Poutrange = sheet.getRange(3,7,newRow,1);

var Poutchart = sheet.getCharts()[2];
var ranges = Poutchart.getRanges();
Poutchart = Poutchart.modify();
Poutchart.removeRange(ranges[0]);
Poutchart.removeRange(ranges[1]);
ranges.forEach(function(Poutrange) {Poutchart.removeRange(Poutrange)});
var modifiedChart = Poutchart.addRange(Poutrange).build();
sheet.updateChart(modifiedChart);



  }
  // Return result of operation
  return ContentService.createTextOutput(result);
}
/**
* Remove leading and trailing single or double quotes
*/
function stripQuotes( value ) {
  return value.replace(/^["']|['"]$/g, "");
}



function onOpen(e) {
  // Add a custom menu to the spreadsheet.
  SpreadsheetApp.getUi() // Or DocumentApp, SlidesApp, or FormApp.
      .createMenu('Display Charts')
      .addItem('Battery Voltage', 'newVoltageChart')
      .addItem('Battery Output Current', 'newIoutChart')
      .addItem('Battery Output Power', 'newPoutChart')
      .addToUi();


}




function newVoltageChart()
{
    var sheet_id = '1SCO1O9fMxWu7AC_HnG8A52A0Kz4f5mPd_om0JT2VKTw'; 		// Spreadsheet ID
    var sheet = SpreadsheetApp.openById(sheet_id).getActiveSheet();		// get Active sheet
    var newRow = sheet.getLastRow() + 1;			

     var hAxisOptions = 
  {
    slantedText: true,
    slantedTextAngle: 60,
    gridlines: {
      count: 12
    }
  }


    chart = sheet.newChart()
    .asLineChart()
    .setOption("useFirstColumnAsDomain", true)
    .addRange(sheet.getRange(3,3,newRow,1))
    .addRange(sheet.getRange(3,4,newRow,1))
    .setNumHeaders(1)
    .setPosition(5, 5, 0, 0)
    .setOption("title", "Battery Voltage")
    .setOption("hAxis", {title: "Time"})
    .setOption("vAxes", {0: {title: "Battery Voltage (V)"}})
    .setOption('hAxis', hAxisOptions)
    .build();

     sheet.insertChart(chart);
}


function newIoutChart()
{
    var sheet_id = '1SCO1O9fMxWu7AC_HnG8A52A0Kz4f5mPd_om0JT2VKTw'; 		// Spreadsheet ID
    var sheet = SpreadsheetApp.openById(sheet_id).getActiveSheet();		// get Active sheet
    var newRow = sheet.getLastRow() + 1;			

    Ioutchart = sheet.newChart()
    .asLineChart()
    .setOption("useFirstColumnAsDomain", true)
    .addRange(sheet.getRange(3,3,newRow,1))
    .addRange(sheet.getRange(3,5,newRow,1))
    .setNumHeaders(1)
    .setPosition(5, 5, 0, 0)
    .setOption("title", "Battery Output Current")
    .setOption("hAxis", {title: "Time"})
    .setOption("vAxes", {0: {title: "Output Current (A)"}})
    .build();

     sheet.insertChart(Ioutchart);
}

function newPoutChart()
{
    var sheet_id = '1SCO1O9fMxWu7AC_HnG8A52A0Kz4f5mPd_om0JT2VKTw'; 		// Spreadsheet ID
    var sheet = SpreadsheetApp.openById(sheet_id).getActiveSheet();		// get Active sheet
    var newRow = sheet.getLastRow() + 1;			

    Poutchart = sheet.newChart()
    .asLineChart()
    .setOption("useFirstColumnAsDomain", true)
    .addRange(sheet.getRange(3,3,newRow,1))    //time
    .addRange(sheet.getRange(3,7,newRow,1))     // Pout
    .setNumHeaders(1)
    .setPosition(5, 5, 0, 0)
    .setOption("title", "Battery Output Power")
    .setOption("hAxis", {title: "Time"})
    .setOption("vAxes", {0: {title: "Output Power (W)"}})
    .build();

     sheet.insertChart(Poutchart);
}

