
function doGet(e) 
{ 

  Logger.log( JSON.stringify(e) );  // view parameters
  var result = 'Ok'; // assume success
  if (e.parameter == 'undefined') 
  {
    result = 'No Parameters';
  }
  else 
  {
    var sheet_id = '1SCO1O9fMxWu7AC_HnG8A52A0Kz4f5mPd_om0JT2VKTw'; 		// Spreadsheet ID
    var sheet = SpreadsheetApp.openById(sheet_id).getActiveSheet();		// get Active sheet
    var newRow = sheet.getLastRow() + 1;			  
	  

    //Logger.log(newRow.length);
    var timezone = SpreadsheetApp.getActive().getSpreadsheetTimeZone();
    var date = new Date();

  //  var time = date.getTime();
    var time = Utilities.formatDate(new Date(), "GMT", "HH:mm:ss")
   // var currentTime = date.getTime();

    var rowData = [];
    
    rowData[0] = date; 											// Timestamp in column A
    rowData[1] = time;

    for (var param in e.parameter) 
    {
      Logger.log('In for loop, param=' + param);
      var value = stripQuotes(e.parameter[param]);
      Logger.log(param + ':' + e.parameter[param]);
      switch (param) {
        case 'Vbat': //Parameter
          rowData[2] = value; //Value in column B
          result = 'Written on column B';
          break;
        case 'Iin': //Parameter
          rowData[3] = value; //Value in column C
          result += ' ,Written on column C';
          break;  

        case 'Iout': //Parameter
          rowData[4] = value; //Value in column C
          result += ' ,Written on column D';
          break;  

        case 'Cooker': //Parameter
          rowData[15] = value; //Value in column C
          result += ' ,Written on column D';
          break;

        case 'Meal': //Parameter
          rowData[16] = value; //Value in column C
          result += ' ,Written on column D';
          break;

        case 'Portion': //Parameter
          rowData[17] = value; //Value in column C
          result += ' ,Written on column D';
          break;

        case 'Method': //Parameter
          rowData[18] = value; //Value in column C
          result += ' ,Written on column D';
          break;

        default:
          result = "unsupported parameter";
          
      }
    }
    Logger.log(JSON.stringify(rowData));
    // Write new row below
    var newRange = sheet.getRange(newRow, 1, 1, rowData.length); 
    newRange.setValues([rowData]);



// UPDATE CHART//////////////////////////////

var charts = sheet.getCharts();
for (var i in charts) {
  var chart = charts[i];
  var newChart = chart
      .modify()
      .addRange(sheet.getRange(3,2,newRow,1))
      .addRange(sheet.getRange(3,3,newRow,1))
      .build();
  sheet.updateChart(newChart);
}



/*                                            // TRIED THIS TO UPDATE CHART AS WELL
var chart = sheet.getCharts()[0];
chart = chart.modify()
    .addRange(sheet.getRange(3,1,newRow,2))
    .setOption('title', 'Battery Voltage')
    .setPosition(2,2,0,0)
    .build();
sheet.updateChart(chart);

*/



  }
  // Return result of operation
  return ContentService.createTextOutput(result);
}
/**
* Remove leading and trailing single or double quotes
*/
function stripQuotes( value ) {
  return value.replace(/^["']|['"]$/g, "");
}



function onOpen(e) {
  // Add a custom menu to the spreadsheet.
  SpreadsheetApp.getUi() // Or DocumentApp, SlidesApp, or FormApp.
      .createMenu('Display Charts')
      .addItem('Battery Voltage', 'newChart')
      .addToUi();



}


function newChart()
{
    var sheet_id = '1SCO1O9fMxWu7AC_HnG8A52A0Kz4f5mPd_om0JT2VKTw'; 		// Spreadsheet ID
    var sheet = SpreadsheetApp.openById(sheet_id).getActiveSheet();		// get Active sheet
    var newRow = sheet.getLastRow() + 1;			

    chart = sheet.newChart()
    .asLineChart()
    .setOption("useFirstColumnAsDomain", true)
    .addRange(sheet.getRange(3,2,newRow,1))
    .addRange(sheet.getRange(3,3,newRow,1))
    .setNumHeaders(1)
    .setPosition(5, 5, 0, 0)
    .setOption("title", "Battery Voltage")
    .setOption("hAxis", {title: "Time"})
    .setOption("vAxes", {0: {title: "Battery Voltage (V)"}})
    .build();

     sheet.insertChart(chart);
}
