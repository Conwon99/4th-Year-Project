// Author: Connor Dorward
// Title : eCook RM System Code
// Board : ESP32 Wrover Module
// Function : 

//Library Declerations............................
// Temperature changing Resistance???
//Vout of divider increases as ADC connceted
// Occured with pin 35, seems fine with 34


#include <ArduinoHttpClient.h> // For HTTP Communication

#include "FS.h"     // SD Card
#include "SD.h"
#include <SPI.h>

#include <Adafruit_SSD1306.h> //OLED
#include <Adafruit_GFX.h>

#include "BluetoothSerial.h"

#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth is not enabled! Please run `make menuconfig` to and enable it
#endif

BluetoothSerial SerialBT;

// Pin Defenitions................................

// TTGO T-Call pins
#define MODEM_RST            5
#define MODEM_PWKEY          4
#define MODEM_POWER_ON       23
#define MODEM_TX             27
#define MODEM_RX             26
#define I2C_SDA              21
#define I2C_SCL              22

// SD Pins      // Vcc=5V
SPIClass sdSPI(HSPI);
#define SD_CS 33
#define SD_SCLK 25
#define SD_MISO 12
#define SD_MOSI 13

//OLED DISPLAY

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// SCL = 22
// SDA = 21

// POWER MONITORING

// Reading Variables


double Time = 0;  //timer interrupt counter
int numReadings =0;
bool ReadingsTaken = false;
bool LoadActive = false;


// ACS712 Current Sensor variables
int ACS712_Pin = 34;
double ACS712_Voltage_Filter;
double ACS712_Voltage =0;
double offsetVoltage = 2.464;
double Iout = 0;
double Iout_sum=0;
double Iout_avg =0;
double Iout_before;
double Iout_filter;
double Iout_avg_filter;
double Iout_avg_before;

float sensitivity = 0.1;  //int sensitivity = 0.1; //100mV/A
double Iout_prev;
int count=0;
int LoadChangeCount=0;

// Voltage Divider variables
const int Vdiv_pin= 39;
double R1 = 99600.0;
double R2=  5080;
double Resistor_ratio;
double Vbat;
double Vbat_filter;
double Vbat_before;
volatile double Vdiv_Voltage;
volatile double Vdiv_Voltage_Before;
volatile double Vdiv_Voltage_sum;
double Vdiv_Voltage_avg;

double power;
double alpha_current=0.1; 
double alpha_voltage=0.1;
bool initVbatbefore = false;
bool LoadChange = false;
double InverterOffset; 

//Cooking Diary Data - Bluetooth 
bool QualDataCollected = false;
char QualArray[10][30] = {"","","",""};     // [Qparam][charnum]
int Qparam=0;
int charnum = 0;
String dataMessage;

//SD
int SDfail=0;


// Button
int ButtonPin = 32;
uint32_t  ButtonPresses =0;
bool pressed = false;

//Relay Pin
int Relay_Pin = 14; //32

// Your GPRS credentials (leave empty, if not needed)
const char apn[]      = "orangeinternet"; // APN (example: internet.vodafone.pt) use https://wiki.apnchanger.org
const char gprsUser[] = ""; // GPRS User
const char gprsPass[] = ""; // GPRS Password

// SIM card PIN (leave empty, if not defined)
const char simPIN[]   = ""; 

// Server details
const char server[] = "script.google.com"; // domain name: example.com, maker.ifttt.com, etc

const char redirect_server[] = "script.googleusercontent.com";

const char orig_resource[150] = "/macros/s/AKfycbyU9xHUQz93jIdueFD28k36ruq2a770PQeCZphTxgbf29IPHsCPeqnRhOLKC7gRUMX-/exec?";
char resource[230] = "/macros/s/AKfycbyU9xHUQz93jIdueFD28k36ruq2a770PQeCZphTxgbf29IPHsCPeqnRhOLKC7gRUMX-/exec?"; //must be pre-defined buffer
char staticresource[230] = "/macros/s/AKfycbyU9xHUQz93jIdueFD28k36ruq2a770PQeCZphTxgbf29IPHsCPeqnRhOLKC7gRUMX-/exec?Vbat=11.93&Iout=0.00&FuelType=none&MealType=Dinner&Cooker=RiceCooker&Meal=Rice&Portion=5&Method=Boil&Reheating=No&Experience=No&Feedback=No";
//const char resource[] = "/macros/s/AKfycbyjiTKgmQOacWeJfgEuF4yKVPsUu_3PjzScw151TH4fJE6CAZAL9GlXug/exec?Vbat=12&Iin=2&Iout=5&Cooker=RiceCooker";         // resource path, for example: /post-data.php
const int  port = 443;                             // server port number

String redirect_resource_string;
char redirect_resource[450] ="";

int status;

char grid_resource[] = "/macros/s/AKfycbyTo6-xW74Ve9T5S5Edy3D9_7PBhewBp-2OCBCGJ-BLDnrdDLb6ZsD2fwaij9SseZay/exec";
String GridCapacity;
int GridCapacity_int;
bool ChargingActive = false;


char CharVbat[6] = "";
char CharIout[6] = "";
char VbatQuery[15] = "Vbat=";
char IinQuery[15] = "&Iin=";
char IoutQuery[15] = "&Iout=";
char FuelTypeQuery[15] = "&FuelType=";
char MealTypeQuery[15] = "&MealType=";
char CookerQuery[20] = "&Cooker=";
char MealQuery[15] = "&Meal=";
char PortionQuery[15] = "&Portion=";
char MethodQuery[15] = "&Method=";
char ReheatingQuery[15] = "&Reheating=";
char ExperienceQuery[15] = "&Experience=";
char FeedbackQuery[15] = "&Feedback=";

//For Testing
//char VbatQuery[15] = "Vbat=1";
//char IinQuery[15] = "&Iin=2";
//char IoutQuery[15] = "&Iout=5";
//char CookerQuery[20] = "&Cooker=C";
//char MealQuery[15] = "&Meal=M";
//char PortionQuery[15] = "&Portion=1";
//char MethodQuery[15] = "&Method=B";

float Iin = 2.0;



// SIM800L defenitions.........................................................


// Set serial for debug console (to Serial Monitor, default speed 115200)
#define SerialMon Serial
// Set serial for AT commands (to SIM800 module)
#define SerialAT Serial1



// Configure TinyGSM library
#define TINY_GSM_MODEM_SIM800      // Modem is SIM800
#define TINY_GSM_RX_BUFFER   1024  // Set RX buffer to 1Kb

// Define the serial console for debug prints, if needed
//#define DUMP_AT_COMMANDS

// NEEDS TO BE AFTER MODEM CONFIGURATION!!
#include <TinyGsmClient.h> // For Establishing GSM/GPRS connection
#include <Wire.h>  // Allows use of I2C Bus (SIM800L & OLED)

#ifdef DUMP_AT_COMMANDS
  #include <StreamDebugger.h>
  StreamDebugger debugger(SerialAT, SerialMon);
  TinyGsm modem(debugger);
#else
  TinyGsm modem(SerialAT);
#endif


// I2C for SIM800 (to keep it running when powered from battery)
TwoWire I2CPower = TwoWire(0);



// TinyGSM Client for Internet connection
TinyGsmClientSecure client(modem);
HttpClient          http(client, server, port);
HttpClient          http_redirect(client, redirect_server, port);



#define uS_TO_S_FACTOR 1000000     /* Conversion factor for micro seconds to seconds */
#define TIME_TO_SLEEP  3600        /* Time ESP32 will go to sleep (in seconds) 3600 seconds = 1 hour */

#define IP5306_ADDR          0x75
#define IP5306_REG_SYS_CTL0  0x00


// Functions

//SIM800L
bool setPowerBoostKeepOn(int);
void setupSIM800L(void);

//Bluetooth
void CollectQualitativeData(void);

//SD Card
void setupSD(void);
void writeFile(fs::FS &fs, const char,const char);
void appendFile(fs::FS &fs, const char , const char);
void logSDCard(void);

//Display
void displayVbat(void);

// URL
void AppendQueryParameters(void);

//Timer
void setupTimer(void);

//ADC
double ReadVoltage(byte);
void setBatteryParameters(void);


double filterVal(double value,double value_before, double alpha);






//......................................................................................................................................................................



void setup() {
  
 SerialMon.begin(115200);
 setupDisplay();
 displayVbat();

  Resistor_ratio = R2/(R2+R1);
  pinMode(ACS712_Pin, INPUT);
  pinMode(Vdiv_pin, INPUT);
  pinMode(ButtonPin,INPUT_PULLUP);
  pinMode(Relay_Pin,OUTPUT);
  digitalWrite(Relay_Pin, LOW);
  
  //attachInterrupt(ButtonPin, Button_ISR, FALLING);

 // SerialBT.begin("ESP32test"); //Bluetooth device name
 // CollectQualitativeData();
 // SerialBT.end(); //Bluetooth device name

  
  setupTimer();
  setupSIM800L();
 // setupSD();
  // Configure the wake up source as timer wake up  
  esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR); // POSSIBLE TIMER DISRUPTION??
}

//......................................................................................................................................................................


  double filterVal(double value,double value_before, double alpha)
  {
  //double alpha = 0.5;
  double filtered_value = alpha*value + (1-alpha)*value_before;
  return filtered_value;
  
  }

int GPRSconnect() {

 SerialMon.print("Connecting to APN: ");
   SerialBT.print("Connecting to APN: ");
  
  SerialMon.print(apn);
  if (!modem.gprsConnect(apn, gprsUser, gprsPass)) {
    SerialMon.println(" fail");
    SerialBT.println(" fail");
    return 0;
  }
  else 
  {
    SerialMon.println(" OK");
    SerialBT.println(" OK");
    return 1;

  }
}

int connectServer(const char* server)
{
  SerialMon.print("Connecting to ");
    SerialBT.print("Connecting to ");
    
    SerialMon.print(server);
    SerialBT.print(server);
    if (!client.connect(server, port)) {
      SerialMon.println(" fail");
      SerialBT.println(" fail");
      return 0;
    }
    else 
    {                          // CONNECTION TO SERVER SUCCESFUL
      SerialMon.println(" OK");
      SerialBT.println(" OK");
 
      return 1;

    }
}


String getRedirectResource(const char* server,char* resource)
{
 //HttpClient  http(client, server, port);
 
 SerialMon.print(F("Performing HTTP GET request... "));
 SerialBT.print("Performing HTTP GET request... ");

 http.connectionKeepAlive();  // Currently, this is needed for HTTPS

       int err = http.get(resource);
 
      if (err != 0) 
      {
       SerialMon.println(F("failed to connect")); /// occurring
       SerialBT.println("failed to connect"); 
       
       delay(10000);
       return "fail";
      }

      status = http.responseStatusCode();
      SerialMon.print(F("Response status code: "));
      SerialMon.println(status);
      SerialBT.println(status);


       // SerialMon.println(F("Response Headers:"));
    while (http.headerAvailable()) 
    {
      String headerName = http.readHeaderName();
      String headerValue = http.readHeaderValue();


    if (status ==302 && headerName == "Location")
    {
      // Dont use string??
      redirect_resource_string = headerValue;

      Serial.println(redirect_resource_string);

    //SerialMon.println("    " + headerName + " : " + headerValue);
    }
  }
     // String body = http.responseBody();
    //  SerialMon.println(F("Response:"));
     // SerialMon.println(body);


      if (!status) 
      {
        delay(10000);
      return "fail";
      }

      http.stop();
      SerialMon.println(F("Server disconnected"));
      SerialBT.println("Server disconnected");
      SerialMon.println();

      redirect_resource_string.remove(0,36);
     // redirect_resource_string.toCharArray(redirect_resource,redirect_resource_string.length()+1); // correct length????????????????????????????????????????
      //Serial.println("Redirect URL = ");
      //Serial.println(redirect_resource);

     // return redirect_resource;
        return redirect_resource_string;

}


String getResource(const char* server,char* resource)
{
 // HttpClient  http(client, server, port);
  
     SerialMon.print(F("Performing HTTP GET request... "));
     SerialBT.print("Performing HTTP GET request... ");
    
     http_redirect.connectionKeepAlive();  // Currently, this is needed for HTTPS


     int err = http_redirect.get(resource);
 
      if (err != 0) 
      {
       SerialMon.println(F("failed to connect")); /// occurring
       SerialBT.println("failed to connect"); 
       
       delay(10000);
       return "fail";
      }

      status = http_redirect.responseStatusCode();
      SerialMon.print(F("Response status code: "));
      SerialMon.println(status);
      SerialBT.println(status);


      String body = http_redirect.responseBody();
      SerialMon.println(F("Response:"));
      SerialMon.println(body);


      if (!status) 
      {
        delay(10000);
        return "fail";
      }

      http_redirect.stop();
      SerialMon.println(F("Server disconnected"));
      SerialBT.println("Server disconnected");
      SerialMon.println();

      return body;  
  
}


void sendParamaters(char* resource)
{
     SerialMon.print(F("Performing HTTP GET request... "));
     SerialBT.print("Performing HTTP GET request... ");
    
     http.connectionKeepAlive();  // Currently, this is needed for HTTPS


     int err = http.get(resource);
 
      if (err != 0) 
      {
       SerialMon.println(F("failed to connect")); /// occurring
       SerialBT.println("failed to connect"); 
       
       delay(10000);
       
      }

      status = http.responseStatusCode();
      SerialMon.print(F("Response status code: "));
      SerialMon.println(status);
      SerialBT.println(status);


      String body = http.responseBody();
      SerialMon.println(F("Response:"));
      SerialMon.println(body);


      if (!status) 
      {
        delay(10000);
        
      }

      http.stop();
      SerialMon.println(F("Server disconnected"));
      SerialBT.println("Server disconnected");
      SerialMon.println();

}





//......................................................................................................................................................................
//......................................................................................................................................................................

void loop() 

{



LoadActive =true;
  
//SerialMon.print("Mainloop Start");


if (pressed || ChargingActive)  // if button pressed, check server to see if sufficient energy to charge 
                                // or if in state of charging , continually check to see if sufficient energy
{
// display....
Serial.printf("Button 1 has been pressed \n",ButtonPresses);

if(GPRSconnect())
{
Serial.println("GPRS Connected!");

  if(connectServer(server))
  {
    Serial.println("Server Connected!");

    redirect_resource_string = getRedirectResource(server,grid_resource);
    
    if (redirect_resource_string !="fail")
    {
      Serial.println("Obtained Redirect Resource!");
      Serial.println(redirect_resource_string);
      redirect_resource_string.toCharArray(redirect_resource,redirect_resource_string.length()+1);

     // HttpClient  http(client, redirect_server, port);

      if(connectServer(redirect_server))   // Need to use another client
      {
        Serial.println("Connected to Redirect Server!");
        GridCapacity = getResource(redirect_server,redirect_resource);

      if (GridCapacity != "fail")
      {
       GridCapacity_int = GridCapacity.toInt();
        if (GridCapacity_int <90)
        {
           Serial.println("Charging Enabled");
           digitalWrite(Relay_Pin, HIGH);
           ChargingActive = true;
          
        }
        else 
        {
           Serial.println("Charging Disabled");
           digitalWrite(Relay_Pin, LOW);
           ChargingActive = false;
          
        }
      }

      
      }
      //redirect_resource_string = getRedirectResource(server,resource);
    }
    
  }
  }
Serial.println("Finish");
  pressed = false;
}

   
//setBatteryParameters();

//sum_Iout_voltage =0;
//sum_Vdiv_voltage =0;

//AppendQueryParameters();
    //  logSDCard();

 //if (SDfail ==1) 
//  {
 //   setupSD();
 // }
  
  //setVbat();
  //displayVbat();


 // AppendQueryParameters();      //    IF ERROR REPLACE HERE

 //LoadActive = true;

  if (LoadActive || ChargingActive) 
  {
  
  Serial.println("Load Active");
  

    if(GPRSconnect())
    {
      Serial.println("GPRS Connected!");
    
      if(connectServer(server))
      {
        Serial.println("Server Connected!");

       
        setBatteryParameters();
        AppendQueryParameters();
        displayVbat();
        
        sendParamaters(resource);  // Send Paramaters to Server // Return response - what if server error?
        memset(resource, 0, sizeof resource);
        strcat(resource,orig_resource);
        Serial.print("Resource=");
        Serial.println(resource);
      }
      
    
     }
  
        
   }
      //redirect_resource_string = getRedirectResource(server,resource);
    







    
  
}





bool setPowerBoostKeepOn(int en){
  I2CPower.beginTransmission(IP5306_ADDR);
  I2CPower.write(IP5306_REG_SYS_CTL0);
  if (en) {
    I2CPower.write(0x37); // Set bit1: 1 enable 0 disable boost keep on
  } else {
    I2CPower.write(0x35); // 0x37 is default reg value
  }
  return I2CPower.endTransmission() == 0;
}


void setupSIM800L() {

// Start I2C communication
  I2CPower.begin(I2C_SDA, I2C_SCL, 400000);
 
  // Keep power when running from battery
  bool isOk = setPowerBoostKeepOn(1);
  SerialMon.println(String("IP5306 KeepOn ") + (isOk ? "OK" : "FAIL"));

  // Set modem reset, enable, power pins
  pinMode(MODEM_PWKEY, OUTPUT);
  pinMode(MODEM_RST, OUTPUT);
  pinMode(MODEM_POWER_ON, OUTPUT);
  digitalWrite(MODEM_PWKEY, LOW);
  digitalWrite(MODEM_RST, HIGH);
  digitalWrite(MODEM_POWER_ON, HIGH);

  // Set GSM module baud rate and UART pins
  SerialAT.begin(115200, SERIAL_8N1, MODEM_RX, MODEM_TX);
  delay(3000);

  // Restart SIM800 module, it takes quite some time
  // To skip it, call init() instead of restart()
  SerialMon.println("Initializing modem...");
  modem.restart();
  // use modem.init() if you don't need the complete restart

  // Unlock your SIM card with a PIN if needed
  if (strlen(simPIN) && modem.getSimStatus() != 3 ) {
    modem.simUnlock(simPIN);
  }


}

// Bluetooth 






void CollectQualitativeData() {

char incomingChar;

Qparam=0;
charnum = 0;
while(Qparam <9 ) {       // While Qualitative data has not been collected //QualDataCollected = 0

if (SerialBT.available()){
    incomingChar = SerialBT.read();

    if (QualArray[Qparam] !="" && incomingChar == '\n') {       // If the message isnt empty and the recieved char is nothing (ie if at end of word)   if (message !=""

      Serial.println(QualArray[Qparam]);
     // Serial.print("_");
      //Serial.print("  length = ");
      //Serial.println(strlen(QualArray[Qparam]));
      
      Qparam++;
      charnum = 0;
      
      //Serial.println(Qparam);
      
      }
    
    if (incomingChar != '\n'){       // If the incomingChar is different than \n, concatenate that char character to QualArray.


      int result;
      result = iscntrl(incomingChar); // If not printable, = non-zero

      if (result >0) {

        //Serial.print("CONTROL");
        
      }
      else 

      {

      QualArray[Qparam][charnum] = incomingChar;
      charnum++;
        
      }
    }
      
    }
    else{
      //Serial.println("/n");
     
      //message = "";
    }
    //Serial.write(incomingChar); 
}
delay(20);

QualDataCollected = true;
}


//................SD Card Functions......................................


void setupSD() {
  
  Serial.println("Initializing SD card...");
sdSPI.begin(SD_SCLK, SD_MISO, SD_MOSI, SD_CS);
if (!SD.begin(SD_CS, sdSPI)) {

Serial.println("Card Mount Failed");

SDfail=1;

}

else

{
Serial.println("Success");
SDfail = 0;
}
uint8_t cardType = SD.cardType();
if(cardType == CARD_NONE) {
  Serial.println("No SD card attached");

SDfail=1;
  
}

File file = SD.open("/data.txt");
  if(!file) {
    Serial.println("File doens't exist");
    Serial.println("Creating file...");
    writeFile(SD, "/data.txt", "Vbat, Iin, Iout \r\n");
  }
  else {
    Serial.println("File already exists");  
  }
  file.close();
  
  
  }



void writeFile(fs::FS &fs, const char * path, const char * message) {
  Serial.printf("Writing file: %s\n", path);

  File file = fs.open(path, FILE_WRITE);
  if(!file) {
    Serial.println("Failed to open file for writing");
    SDfail = 1;
    return;
  }
  if(file.print(message)) {
    Serial.println("File written");
  } else {
    Serial.println("Write failed");
    SDfail = 1;
  }
  file.close();
}


void appendFile(fs::FS &fs, const char * path, const char * message) {
  Serial.printf("Appending to file: %s\n", path);

  File file = fs.open(path, FILE_APPEND);
  if(!file) {
    Serial.println("Failed to open file for appending");
    SDfail = 1;
    return;
  }
  if(file.print(message)) {
    Serial.println("Message appended");
  } else {
    Serial.println("Append failed");
    SDfail = 1;
  }
  file.close();
}



void logSDCard() {
  dataMessage = String(Vbat) + "," + String(Iin) + "," + String(Iout)+ "\r\n";
  Serial.print("Save data: ");
  Serial.println(dataMessage);
  appendFile(SD, "/data.txt", dataMessage.c_str());
}

//// OLED Functions


void setupDisplay () {

  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) // Address 0x3C for 128x32
  
  { 
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever

  }

  
}


void displayVbat() {

display.clearDisplay();

  display.setTextSize(1); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);

  display.print("V = ");
  display.print(Vbat);
  
  display.display();      // Show initial text

}

void AppendQueryParameters() {



dtostrf(float(Vbat_filter), 4, 2, CharVbat); //Convert float Vbat to char array 'CharVbat' 4 is mininum width, 2 is precision
dtostrf(float(Iout_avg_filter), 4, 2, CharIout); //Convert float Vbat to char array 'CharVbat' 4 is mininum width, 2 is precision

Serial.print("CharVbat =");
Serial.println(CharVbat);

Serial.print("CharIout =");
Serial.println(CharIout);

strcat(resource, VbatQuery); 
strcat(resource, CharVbat);
//Vbat++;

//strcat(resource, IinQuery); 

strcat(resource, IoutQuery); 
strcat(resource, CharIout);

if (QualDataCollected)
{

strcat(resource,FuelTypeQuery); // resource + Resource_variables
strcat(resource,QualArray[0]); 

strcat(resource,MealTypeQuery); // resource + Resource_variables
strcat(resource,QualArray[1]); 

strcat(resource,CookerQuery); // resource + Resource_variables
strcat(resource,QualArray[2]); 

strcat(resource,MealQuery); // resource + Resource_variables
strcat(resource,QualArray[3]); 

strcat(resource,PortionQuery); // resource + Resource_variables
strcat(resource,QualArray[4]); 

strcat(resource,MethodQuery); // resource + Resource_variables
strcat(resource,QualArray[5]); 

strcat(resource,ReheatingQuery); // resource + Resource_variables
strcat(resource,QualArray[6]); 

strcat(resource,ExperienceQuery); // resource + Resource_variables
strcat(resource,QualArray[7]); 

strcat(resource,FeedbackQuery); // resource + Resource_variables
strcat(resource,QualArray[8]); 

QualDataCollected =false;
}

Serial.println(resource);

}

hw_timer_t * timer = NULL;

// Dont include anything float related


void IRAM_ATTR onTimer() // Read values every 0.2s
                         // If spike in current, set relay off
                         // Want to get the start time of reading as 
                         // large time difference between start of cook and transmission of values
                         // two variables on server..reading made vs reading recieved
{

if (digitalRead(ButtonPin) ==0)
{
  pressed = true;
}

  count++;


  // Vdiv..........................
  
  Vdiv_Voltage = ReadVoltage(Vdiv_pin);

  Vdiv_Voltage_sum +=Vdiv_Voltage;


  // Current - voltage and avareaged current gerts filtered - double filtered
  
  ACS712_Voltage = ReadVoltage(ACS712_Pin) - offsetVoltage;

  
  Iout = ACS712_Voltage*10;        // 100mV/A    so 1V = 10A

      if (count ==1)
  {
  
    Iout_prev = Iout;
    
  }
  if (count >=10)
  {
  
    if (abs(Iout - Iout_prev) > 1.5)  // if sufficiently large voltage change over 0.6s
    {

      LoadChange = true;
      alpha_voltage = 1;
      alpha_current = 1;    // stop filtering
      
    }

    count = 0;
  }

if (LoadChange ==true)
{
  LoadChangeCount++;


if (LoadChangeCount >=15)
{
  Serial.println("reset");
  LoadChange=false;
  LoadChangeCount=0;
  alpha_voltage = 0.1;
  alpha_current = 0.05; 
}
}
  Iout_filter = filterVal(Iout,Iout_before,alpha_current);
  Iout_before = Iout_filter;
  
  
  Iout_sum +=Iout_filter;


  numReadings++;
  Time+=0.2;
  
}



void setupTimer() {

  // Use 1st timer of 4
  // 1 tick take 1/(80MHZ/80) = 1us so we set divider 80 and count up 
  timer = timerBegin(0, 80, true);

  // Attach onTimer function to our timer 
  timerAttachInterrupt(timer, &onTimer, true);

  // Set alarm to call onTimer function every second 1 tick is 1us
 // => 1 second is 1000000us 
  // Repeat the alarm (third parameter) 
  timerAlarmWrite(timer, 200000, true);

  //Start an alarm 
  timerAlarmEnable(timer);

}




double ReadVoltage(byte pin){
  double reading = analogRead(pin); // Reference voltage is 3v3 so maximum reading is 3v3 = 4095 in range 0 to 4095
  if(reading < 1 || reading > 4095) return 0;
   //return -0.000000000009824 * pow(reading,3) + 0.000000016557283 * pow(reading,2) + 0.000854596860691 * reading + 0.065440348345433;
  return (-0.000000000000016 * pow(reading,4) + 0.000000000118171 * pow(reading,3)- 0.000000301211691 * pow(reading,2)+ 0.001109019271794 * reading + 0.034143524634089)+0.005;
} 


void setBatteryParameters()
{

 Iout_avg = Iout_sum/numReadings;

  Iout_avg_filter =  filterVal(Iout_avg,Iout_avg_before,alpha_current);
  Iout_avg_before =  Iout_avg_filter;
  
  Vdiv_Voltage_avg = Vdiv_Voltage_sum/numReadings;

    if (Iout_avg < 0.2 )        // if off 
  {
    Iout_avg_filter=0;
    InverterOffset = 0;
  }
  else 
  {
    InverterOffset = 10.96;
    
  }



  // set Vbat_before 


  Vbat = Vdiv_Voltage_avg/Resistor_ratio;

  if (initVbatbefore ==false) 
  {
    Vbat_before=Vbat;
    initVbatbefore=true;
  }

  
  Vbat_filter = filterVal(Vbat,Vbat_before,alpha_voltage);
  Vbat_before = Vbat_filter;
  
  power = Vbat_filter*Iout_avg_filter - InverterOffset;

  if(power <0)
  {
    power = 0;
  }
  

  Serial.print(Time);
  Serial.print(",");
  Serial.print(Vbat_filter,3);
  Serial.print(",");
  Serial.print(Iout_avg_filter,3);
  Serial.print(",");
  Serial.print(power,3);
  Serial.println();


  
  numReadings=0;
  Iout_sum=0;
  Vdiv_Voltage_sum=0;

}



// Pot : white -gnd
//     : black adc
//     : Brown 3.3v
