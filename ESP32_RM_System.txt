// Author: Connor Dorward
// Title : eCook RM System Code
// Board : ESP32 Wrover Module
// Function : 

//Library Declerations............................
// Temperature changing Resistance???
//Vout of divider increases as ADC connceted
// Occured with pin 35, seems fine with 34


#include <ArduinoHttpClient.h> // For HTTP Communication

#include "FS.h"     // SD Card
#include "SD.h"
#include <SPI.h>

#include <Adafruit_SSD1306.h> //OLED
#include <Adafruit_GFX.h>

#include "BluetoothSerial.h"

#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth is not enabled! Please run `make menuconfig` to and enable it
#endif

BluetoothSerial SerialBT;

// Pin Defenitions................................

// TTGO T-Call pins
#define MODEM_RST            5
#define MODEM_PWKEY          4
#define MODEM_POWER_ON       23
#define MODEM_TX             27
#define MODEM_RX             26
#define I2C_SDA              21
#define I2C_SCL              22

// SD Pins      // Vcc=5V
SPIClass sdSPI(HSPI);
#define SD_CS 33
#define SD_SCLK 25
#define SD_MISO 12
#define SD_MOSI 13

//OLED DISPLAY

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// SCL = 22
// SDA = 21

// POWER MONITORING

// Reading Variables


int NumReadings =0;
bool ReadingsTaken = false;

bool LoadActive = false;


// ACS712 Current Sensor variables
const int Iout_pin = 34;
float offsetVoltage = 2.46;
float Iout = 0.0;
float sensitivity = 0.1;  //int sensitivity = 0.1; //100mV/A
float Inverteroffset = 0.81;
volatile double Iout_voltage;
volatile double sum_Iout_voltage=0;
double avg_Iout_voltage;


// Voltage Divider variables
const int Vdiv_pin= 39;
double R1 = 99600.0;
double R2=  5080;
double Resistor_ratio;
float Vbat = 0.0;
volatile double Vdiv_voltage;
volatile double sum_Vdiv_voltage=0;
double avg_Vdiv_voltage;

double power;


//Cooking Diary Data - Bluetooth 
int QualDataCollected = 0;
char QualArray[4][30] = {"","","",""};     // [Qparam][charnum]
int Qparam=0;
int charnum = 0;
String dataMessage;

//SD
int SDfail=0;


// Button
int ButtonPin = 35;
uint32_t  ButtonPresses =0;
bool pressed = false;

//Relay Pin
int Relay_Pin = 27; //32

// Your GPRS credentials (leave empty, if not needed)
const char apn[]      = "orangeinternet"; // APN (example: internet.vodafone.pt) use https://wiki.apnchanger.org
const char gprsUser[] = ""; // GPRS User
const char gprsPass[] = ""; // GPRS Password

// SIM card PIN (leave empty, if not defined)
const char simPIN[]   = ""; 

// Server details
const char server[] = "script.google.com"; // domain name: example.com, maker.ifttt.com, etc

const char redirect_server[] = "script.googleusercontent.com";

const char orig_resource[160] = "/macros/s/AKfycbzTAkuhTqJfi-EofdpOjBxKNlDe18fdTkOPHMOuOwvl9zbDqfPHwbb1/exec?";
char resource[160] = "/macros/s/AKfycbzTAkuhTqJfi-EofdpOjBxKNlDe18fdTkOPHMOuOwvl9zbDqfPHwbb1/exec?"; //must be pre-defined buffer
char staticresource[160] = "/macros/s/AKfycbzTAkuhTqJfi-EofdpOjBxKNlDe18fdTkOPHMOuOwvl9zbDqfPHwbb1/exec?Vbat=1.00&Iin=2&Iout=5&Cooker=RiceCooker&Meal=Rice&Portion=3&Method=Boil&ndplr=1";
//const char resource[] = "/macros/s/AKfycbyjiTKgmQOacWeJfgEuF4yKVPsUu_3PjzScw151TH4fJE6CAZAL9GlXug/exec?Vbat=12&Iin=2&Iout=5&Cooker=RiceCooker";         // resource path, for example: /post-data.php
const int  port = 443;                             // server port number

String redirect_resource_string;
char redirect_resource[450] ="";

int status;




char CharVbat[6] = "";
char CharIout[6] = "";
char VbatQuery[15] = "Vbat=";
char IinQuery[15] = "&Iin=";
char IoutQuery[15] = "&Iout=";
char CookerQuery[20] = "&Cooker=";
char MealQuery[15] = "&Meal=";
char PortionQuery[15] = "&Portion=";
char MethodQuery[15] = "&Method=";

//For Testing
//char VbatQuery[15] = "Vbat=1";
//char IinQuery[15] = "&Iin=2";
//char IoutQuery[15] = "&Iout=5";
//char CookerQuery[20] = "&Cooker=C";
//char MealQuery[15] = "&Meal=M";
//char PortionQuery[15] = "&Portion=1";
//char MethodQuery[15] = "&Method=B";

float Iin = 2.0;



// SIM800L defenitions.........................................................


// Set serial for debug console (to Serial Monitor, default speed 115200)
#define SerialMon Serial
// Set serial for AT commands (to SIM800 module)
#define SerialAT Serial1



// Configure TinyGSM library
#define TINY_GSM_MODEM_SIM800      // Modem is SIM800
#define TINY_GSM_RX_BUFFER   1024  // Set RX buffer to 1Kb

// Define the serial console for debug prints, if needed
//#define DUMP_AT_COMMANDS

// NEEDS TO BE AFTER MODEM CONFIGURATION!!
#include <TinyGsmClient.h> // For Establishing GSM/GPRS connection
#include <Wire.h>  // Allows use of I2C Bus (SIM800L & OLED)

#ifdef DUMP_AT_COMMANDS
  #include <StreamDebugger.h>
  StreamDebugger debugger(SerialAT, SerialMon);
  TinyGsm modem(debugger);
#else
  TinyGsm modem(SerialAT);
#endif


// I2C for SIM800 (to keep it running when powered from battery)
TwoWire I2CPower = TwoWire(0);



// TinyGSM Client for Internet connection
TinyGsmClientSecure client(modem);
HttpClient          http(client, server, port);
HttpClient          http_redirect(client, redirect_server, port);

#define uS_TO_S_FACTOR 1000000     /* Conversion factor for micro seconds to seconds */
#define TIME_TO_SLEEP  3600        /* Time ESP32 will go to sleep (in seconds) 3600 seconds = 1 hour */

#define IP5306_ADDR          0x75
#define IP5306_REG_SYS_CTL0  0x00


// Functions

//SIM800L
bool setPowerBoostKeepOn(int);
void setupSIM800L(void);

//Bluetooth
void CollectQualitativeData(void);

//SD Card
void setupSD(void);
void writeFile(fs::FS &fs, const char,const char);
void appendFile(fs::FS &fs, const char , const char);
void logSDCard(void);

//Display
void displayVbat(void);

// URL
void AppendQueryParameters(void);

//Timer
void setupTimer(void);

//ADC
double ReadVoltage(byte);
void setBatteryParameters(void);

void IRAM_ATTR Button_ISR() {
  
  ButtonPresses += 1;
  pressed = true;
  //button1.pressed = true;
}





void setup() {
  
  SerialMon.begin(115200);
//  setupDisplay();
//  displayVbat();

  Resistor_ratio = R2/(R2+R1);
  pinMode(ButtonPin,INPUT_PULLUP);
  pinMode(Relay_Pin,OUTPUT);
  
  attachInterrupt(ButtonPin, Button_ISR, FALLING);

 // SerialBT.begin("ESP32test"); //Bluetooth device name
  //CollectQualitativeData();
 // SerialBT.end(); //Bluetooth device name

  
  setupTimer();
  setupSIM800L();
  setupSD();
  // Configure the wake up source as timer wake up  
  esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR); // POSSIBLE TIMER DISRUPTION??
}



void loop() 

{
//SerialMon.print("Mainloop Start");

if (pressed)
  {
        Serial.printf("Button 1 has been pressed %u times\n",ButtonPresses);
        // Print to display
              

        pressed = false;
  }

//setBatteryParameters();

//sum_Iout_voltage =0;
//sum_Vdiv_voltage =0;

//AppendQueryParameters();
    //  logSDCard();

 //if (SDfail ==1) 
//  {
 //   setupSD();
 // }
  
  //setVbat();
  //displayVbat();


 // AppendQueryParameters();      //    IF ERROR REPLACE HERE

if (LoadActive) 
{

   SerialMon.print("Connecting to APN: ");
   SerialBT.print("Connecting to APN: ");
  
  SerialMon.print(apn);
  if (!modem.gprsConnect(apn, gprsUser, gprsPass)) {
    SerialMon.println(" fail");
    SerialBT.println(" fail");
  }
  else 
  {
    SerialMon.println(" OK");
    SerialBT.println(" OK");


   // setBatteryParameters();
    
    SerialMon.print("Connecting to ");
    SerialBT.print("Connecting to ");
    
    SerialMon.print(server);
    SerialBT.print(server);
    if (!client.connect(server, port)) {
      SerialMon.println(" fail");
      SerialBT.println(" fail");

    }
    else 
    {                          // CONNECTION TO SERVER SUCCESFUL
      
      SerialMon.println(" OK");
      SerialBT.println(" OK");
      SerialMon.print(F("Performing HTTP GET request... "));
      SerialBT.print("Performing HTTP GET request... ");


    
      http.connectionKeepAlive();  // Currently, this is needed for HTTPS

 //     setBatteryParameters();
  //    AppendQueryParameters();
      //displayVbat();
 //     logSDCard();
      
      ReadingsTaken == true; // reset sum values
      

      // Disable timer here??

     //int err = http.get(resource);
       int err = http.get(staticresource);
 
      if (err != 0) 
      {
       SerialMon.println(F("failed to connect")); /// occurring
       SerialBT.println("failed to connect"); 
       
       delay(10000);
       return;
      }

      status = http.responseStatusCode();
      SerialMon.print(F("Response status code: "));
      SerialMon.println(status);
      SerialBT.println(status);


        SerialMon.println(F("Response Headers:"));
    while (http.headerAvailable()) 
    {
      String headerName = http.readHeaderName();
      String headerValue = http.readHeaderValue();


    if (status ==302 && headerName == "Location")
    {

      redirect_resource_string = headerValue;

      Serial.println(redirect_resource_string);

    //SerialMon.println("    " + headerName + " : " + headerValue);
    }
  }
      String body = http.responseBody();
      SerialMon.println(F("Response:"));
      SerialMon.println(body);


      if (!status) 
      {
        delay(10000);
        return;
      }

      http.stop();
      SerialMon.println(F("Server disconnected"));
      SerialBT.println("Server disconnected");
      SerialMon.println();


    }
//............IF REDIRECT..........................//

Serial.print("status = ");
Serial.print(status);

      if (status == 302) 


Serial.println("So its 302...  ");

      redirect_resource_string.remove(0,36);

      redirect_resource_string.toCharArray(redirect_resource,redirect_resource_string.length()+1); // correct length????????????????????????????????????????
      Serial.println("Redirect URL = ");
      Serial.println(redirect_resource);


      Serial.print("Connecting to ");
      SerialBT.print("Connecting to ");
    
      Serial.print(redirect_server);
      SerialBT.print(redirect_server);  

      {
       if (!client.connect(redirect_server, port)) 
       {
        
          Serial.println(" fail");
          SerialBT.println(" fail");

       }
       else 
        {                                    // CONNECTION TO SERVER SUCCESFUL
          Serial.println(" OK");
          SerialBT.println(" OK");
          Serial.print(F("Performing HTTP GET request... "));

          http_redirect.connectionKeepAlive();  // Currently, this is needed for HTTPS
          int err = http_redirect.get(redirect_resource);
 
        if (err != 0) 
        {
          Serial.println(F("failed to connect")); /// occurring
          SerialBT.println("failed to connect"); 
         
          delay(10000);
          return;
        }
        
          int status = http_redirect.responseStatusCode();
          Serial.print(F("Response status code: "));
          SerialMon.println(status);
          SerialBT.println(status);

          while (http_redirect.headerAvailable()) 
          {
          String headerName = http_redirect.readHeaderName();
          String headerValue = http_redirect.readHeaderValue();
          Serial.println("    " + headerName + " : " + headerValue);

          }

          
          String body = http_redirect.responseBody();
          Serial.println(F("Response:"));
          Serial.println(body);


          
        }
    
       http_redirect.stop();
      }

      
      // Put ESP32 into deep sleep mode (with timer wake up)
      //esp_deep_sleep_start();

       delay(1000);

      memset(resource, 0, sizeof resource);
      strcpy(resource,orig_resource);

      Serial.println();
      Serial.println("New Resource =");
      Serial.println(resource);
      Serial.println();

      
       
    
  }

}


}













bool setPowerBoostKeepOn(int en){
  I2CPower.beginTransmission(IP5306_ADDR);
  I2CPower.write(IP5306_REG_SYS_CTL0);
  if (en) {
    I2CPower.write(0x37); // Set bit1: 1 enable 0 disable boost keep on
  } else {
    I2CPower.write(0x35); // 0x37 is default reg value
  }
  return I2CPower.endTransmission() == 0;
}


void setupSIM800L() {

// Start I2C communication
  I2CPower.begin(I2C_SDA, I2C_SCL, 400000);
 
  // Keep power when running from battery
  bool isOk = setPowerBoostKeepOn(1);
  SerialMon.println(String("IP5306 KeepOn ") + (isOk ? "OK" : "FAIL"));

  // Set modem reset, enable, power pins
  pinMode(MODEM_PWKEY, OUTPUT);
  pinMode(MODEM_RST, OUTPUT);
  pinMode(MODEM_POWER_ON, OUTPUT);
  digitalWrite(MODEM_PWKEY, LOW);
  digitalWrite(MODEM_RST, HIGH);
  digitalWrite(MODEM_POWER_ON, HIGH);

  // Set GSM module baud rate and UART pins
  SerialAT.begin(115200, SERIAL_8N1, MODEM_RX, MODEM_TX);
  delay(3000);

  // Restart SIM800 module, it takes quite some time
  // To skip it, call init() instead of restart()
  SerialMon.println("Initializing modem...");
  modem.restart();
  // use modem.init() if you don't need the complete restart

  // Unlock your SIM card with a PIN if needed
  if (strlen(simPIN) && modem.getSimStatus() != 3 ) {
    modem.simUnlock(simPIN);
  }


}

// Bluetooth 






void CollectQualitativeData() {

char incomingChar;

Qparam=0;
charnum = 0;
while(Qparam <4 ) {       // While Qualitative data has not been collected //QualDataCollected = 0

if (SerialBT.available()){
    incomingChar = SerialBT.read();

    if (QualArray[Qparam] !="" && incomingChar == '\n') {       // If the message isnt empty and the recieved char is nothing (ie if at end of word)   if (message !=""

      Serial.println(QualArray[Qparam]);
     // Serial.print("_");
      //Serial.print("  length = ");
      //Serial.println(strlen(QualArray[Qparam]));
      
      Qparam++;
      charnum = 0;
      
      //Serial.println(Qparam);
      
      }
    
    if (incomingChar != '\n'){       // If the incomingChar is different than \n, concatenate that char character to QualArray.


      int result;
      result = iscntrl(incomingChar); // If not printable, = non-zero

      if (result >0) {

        //Serial.print("CONTROL");
        
      }
      else 

      {

      QualArray[Qparam][charnum] = incomingChar;
      charnum++;
        
      }
    }
      
    }
    else{
      //Serial.println("/n");
     
      //message = "";
    }
    //Serial.write(incomingChar); 
}
delay(20);
}


//................SD Card Functions......................................


void setupSD() {
  
  Serial.println("Initializing SD card...");
sdSPI.begin(SD_SCLK, SD_MISO, SD_MOSI, SD_CS);
if (!SD.begin(SD_CS, sdSPI)) {

Serial.println("Card Mount Failed");

SDfail=1;

}

else

{
Serial.println("Success");
SDfail = 0;
}
uint8_t cardType = SD.cardType();
if(cardType == CARD_NONE) {
  Serial.println("No SD card attached");

SDfail=1;
  
}

File file = SD.open("/data.txt");
  if(!file) {
    Serial.println("File doens't exist");
    Serial.println("Creating file...");
    writeFile(SD, "/data.txt", "Vbat, Iin, Iout \r\n");
  }
  else {
    Serial.println("File already exists");  
  }
  file.close();
  
  
  }



void writeFile(fs::FS &fs, const char * path, const char * message) {
  Serial.printf("Writing file: %s\n", path);

  File file = fs.open(path, FILE_WRITE);
  if(!file) {
    Serial.println("Failed to open file for writing");
    SDfail = 1;
    return;
  }
  if(file.print(message)) {
    Serial.println("File written");
  } else {
    Serial.println("Write failed");
    SDfail = 1;
  }
  file.close();
}


void appendFile(fs::FS &fs, const char * path, const char * message) {
  Serial.printf("Appending to file: %s\n", path);

  File file = fs.open(path, FILE_APPEND);
  if(!file) {
    Serial.println("Failed to open file for appending");
    SDfail = 1;
    return;
  }
  if(file.print(message)) {
    Serial.println("Message appended");
  } else {
    Serial.println("Append failed");
    SDfail = 1;
  }
  file.close();
}



void logSDCard() {
  dataMessage = String(Vbat) + "," + String(Iin) + "," + String(Iout)+ "\r\n";
  Serial.print("Save data: ");
  Serial.println(dataMessage);
  appendFile(SD, "/data.txt", dataMessage.c_str());
}

//// OLED Functions


void setupDisplay () {

  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) // Address 0x3C for 128x32
  
  { 
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever

  }

  
}


void displayVbat() {

display.clearDisplay();

  display.setTextSize(1); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);

  display.print("V = ");
  display.print(Vbat);
  
  display.display();      // Show initial text

}

void AppendQueryParameters() {



dtostrf(Vbat, 4, 2, CharVbat); //Convert float Vbat to char array 'CharVbat' 4 is mininum width, 2 is precision
dtostrf(Iout, 4, 2, CharIout); //Convert float Vbat to char array 'CharVbat' 4 is mininum width, 2 is precision

Serial.print("CharVbat =");
Serial.println(CharVbat);

Serial.print("CharIout =");
Serial.println(CharIout);

strcat(resource, VbatQuery); 
strcat(resource, CharVbat);
//Vbat++;

//strcat(resource, IinQuery); 

strcat(resource, IoutQuery); 
strcat(resource, CharIout);

/*
strcat(resource,CookerQuery); // resource + Resource_variables
strcat(resource,QualArray[0]); 

strcat(resource,MealQuery); // resource + Resource_variables
strcat(resource,QualArray[1]); 

strcat(resource,PortionQuery); // resource + Resource_variables
strcat(resource,QualArray[2]); 

strcat(resource,MethodQuery); // resource + Resource_variables
strcat(resource,QualArray[3]); 

*/
Serial.println(resource);

}

hw_timer_t * timer = NULL;

// Dont include anything float related


void IRAM_ATTR onTimer() // Read values every 0.2s
                         // If spike in current, set relay off
                         // Want to get the start time of reading as 
                         // large time difference between start of cook and transmission of values
                         // two variables on server..reading made vs reading recieved
{

  

 if (ReadingsTaken == true)
    {
      NumReadings = 0;
      sum_Iout_voltage =0;
      sum_Vdiv_voltage =0;
      ReadingsTaken = false;
     
    }


 





    Vdiv_voltage = ReadVoltage(Vdiv_pin);
    sum_Vdiv_voltage += Vdiv_voltage;

    Iout_voltage = ReadVoltage(Iout_pin) -offsetVoltage;
    sum_Iout_voltage += Iout_voltage;
    
//Serial.println();
//Serial.println(Vdiv_voltage,7);
//Serial.println(Iout_voltage,7);
//Serial.println();

    if (Iout_voltage >0.3)     // Start Count
    {
    //  bool LoadActive =true;
    //  int IoutOnCount++;
      

      
    }

   //Serial.print("Iout_voltage = ");
   // Serial.println(Iout_voltage);
//
   // Serial.print("NumReadings = ");
   // Serial.println(NumReadings);

 //  Serial.print("ReadingsTaken = ");
  //  Serial.println(ReadingsTaken);
  //NumReadings++;

    NumReadings++;
   // Serial.print(NumReadings);
  
}



void setupTimer() {

  // Use 1st timer of 4
  // 1 tick take 1/(80MHZ/80) = 1us so we set divider 80 and count up 
  timer = timerBegin(0, 80, true);

  // Attach onTimer function to our timer 
  timerAttachInterrupt(timer, &onTimer, true);

  // Set alarm to call onTimer function every second 1 tick is 1us
 // => 1 second is 1000000us 
  // Repeat the alarm (third parameter) 
  timerAlarmWrite(timer, 500000, true);

  //Start an alarm 
  timerAlarmEnable(timer);

}




double ReadVoltage(byte pin){
  double reading = analogRead(pin); // Reference voltage is 3v3 so maximum reading is 3v3 = 4095 in range 0 to 4095
  if(reading < 1 || reading > 4095) return 0;
   //return -0.000000000009824 * pow(reading,3) + 0.000000016557283 * pow(reading,2) + 0.000854596860691 * reading + 0.065440348345433;
  return (-0.000000000000016 * pow(reading,4) + 0.000000000118171 * pow(reading,3)- 0.000000301211691 * pow(reading,2)+ 0.001109019271794 * reading + 0.034143524634089)+0.005;
} 


void setBatteryParameters()
{

   // get average adc voltage values 
   avg_Vdiv_voltage = sum_Vdiv_voltage/NumReadings;
   Vbat = avg_Vdiv_voltage/Resistor_ratio +0.06;

   double Vbat_d = avg_Vdiv_voltage/Resistor_ratio+0.06;

Serial.print("Vdiv_voltage Double = ");
Serial.println(Vbat_d,7);
   

   avg_Iout_voltage = sum_Iout_voltage/NumReadings;
   Iout = (Iout_voltage/sensitivity);// - Inverteroffset;

   if (Iout >0.3)
   {
    Iout = Iout - Inverteroffset;
    
   }
   else if (Iout <0.3)
   {
    Iout= 0.0;
    
   }
   
   power = Iout*Vbat;

Serial.print("avg_Vdiv_voltage = ");
Serial.println(avg_Vdiv_voltage,7);

Serial.print("Vbat = ");
Serial.println(Vbat);

Serial.print("avg_Iout_voltage = ");
Serial.println(avg_Iout_voltage,7);

Serial.print("Iout = ");
Serial.println(Iout);

Serial.print("Power = ");
Serial.println(power);

Serial.print("NumReadings = ");
Serial.println(NumReadings);

Serial.println();
Serial.println();



}

// Pot : white -gnd
//     : black adc
//     : Brown 3.3v
