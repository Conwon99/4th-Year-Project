// Power Monitoring

int ACS712_Pin = 34;
int Vdiv_pin = 39;

bool AverageTaken = false;

int numReadings=0;

//Conversion Variables

double offsetVoltage = 2.464;
double currentValue = 0;
float sensitivity = 0.1;  //int sensitivity = 0.1; //100mV/A
double Vbat = 0;
double power;

double InverterOffset; 


double ACS712_Voltage_Filter;

double ACS712_Voltage =0;
double ACS712_Voltage_Before;


double Time = 0;
double rawCurrentVal =0;
double currentValue_sum=0;
double currentValue_avg =0;


double maxAmps;
double minAmps;
double noise; 


 // Vdiv

double R1 = 101000.0;
double R2=  5080.0;
 
//double Vnow =0;
//double Vbefore = 12.25;
//double alpha = 0.05;
//double Vbef =0.58;
//double voltage_value_raw=0;
//double voltage_value_filter =0;
//double voltage_value_avg_filter =0;
//double voltage_value_sum_filter = 0;


double Resistor_ratio;
double Vdiv_Voltage;
double Vdiv_Voltage_Filter;
double Vdiv_Voltage_Before = 0.58;
double Vdiv_Voltage_sum;
double Vdiv_Voltage_avg;

double Vbat_filter;
double Vbat_before = 12.08;

double Vdiv_Voltage_Filter_1, Vdiv_Voltage_Filter_2;
double Vdiv_Voltage_Before_1, Vdiv_Voltage_Before_2;

double Vbat_1, Vbat_2;

double currentValue_filter;
double currentValue_before;


double currentValue_avg_filter;
double currentValue_avg_before;

volatile int responseTimer=0;
double ACS712_Voltage_prev;
double alpha_current=0.1; 
bool LoadChange= false;

hw_timer_t * timer = NULL;

void IRAM_ATTR onTimer(){

  // Current - voltage and avareaged current gerts filtered - double filtered
  
  ACS712_Voltage = ReadVoltage(ACS712_Pin) - offsetVoltage;

 if ((ACS712_Voltage-ACS712_Voltage_prev)> 0.1)    // if large spike (ie load turned on)
  {
    //LoadChange = true;
    Serial.println("yes");
    alpha_current = 1;    // stop filtering
  }
  else
  
   {
    alpha_current=0.1;
   }
  
  ACS712_Voltage_prev = ACS712_Voltage;
  
 
  
  
  ACS712_Voltage_Filter = filterVal(ACS712_Voltage,ACS712_Voltage_Before,alpha_current);
  ACS712_Voltage_Before = ACS712_Voltage_Filter;
  
  currentValue = ACS712_Voltage_Filter*10;        // 100mV/A    so 1V = 10A
  
  
  currentValue_filter = filterVal(currentValue,currentValue_before,alpha_current);
  currentValue_before = currentValue_filter;
  
  
  currentValue_sum +=currentValue_filter;
  
  // Vdiv..........................
  
  Vdiv_Voltage = ReadVoltage(Vdiv_pin);
  Vdiv_Voltage_sum +=Vdiv_Voltage;
  
  
  
  // Look at difference in previous value, if above threshold 
  // start timer, if still big difference in value then override avg value
  
  
  
  
  /*
  
  Serial.print(Time);
  Serial.print(",");
  Serial.print(Vbat_filter,3);
  Serial.print(",");
  Serial.print(currentValue,3);
  Serial.print(",");
  Serial.print(currentValue_filter,3);
  Serial.print(",");
  Serial.print(currentValue_avg,3);
  Serial.print(",");
  Serial.println(power,3);
  
  */
  
  
  //Serial.println(ACS712_Voltage,3);
  
  if (numReadings >=4)
  {
  
    AverageTaken = true;
  }
  
  numReadings++;
  Time+=0.2;
  }
  
  
  
  double filterVal(double value,double value_before, double alpha)
  {
  //double alpha = 0.5;
  double filtered_value = alpha*value + (1-alpha)*value_before;
  return filtered_value;
  
}

void setup(void) 
{

  pinMode(ACS712_Pin, INPUT);
  pinMode(Vdiv_pin, INPUT);
  Resistor_ratio = R2/(R2+R1);
  
  Serial.begin(9600); 

  timer = timerBegin(0, 80, true);

  /* Attach onTimer function to our timer */
  timerAttachInterrupt(timer, &onTimer, true);

  /* Set alarm to call onTimer function every second 1 tick is 1us
  => 1 second is 1000000us */
  /* Repeat the alarm (third parameter) */
  timerAlarmWrite(timer, 200000, true);    // every 0.2s

  /* Start an alarm */
  timerAlarmEnable(timer);


}


double ReadVoltage(byte pin){
  double reading = analogRead(pin); // Reference voltage is 3v3 so maximum reading is 3v3 = 4095 in range 0 to 4095
  if(reading < 1 || reading > 4095) return 0;
   //return -0.000000000009824 * pow(reading,3) + 0.000000016557283 * pow(reading,2) + 0.000854596860691 * reading + 0.065440348345433;
  return (-0.000000000000016 * pow(reading,4) + 0.000000000118171 * pow(reading,3)- 0.000000301211691 * pow(reading,2)+ 0.001109019271794 * reading + 0.034143524634089)+0.005;
} 



void loop(void) 
{

if (AverageTaken ==true)

{



  currentValue_avg = currentValue_sum/numReadings;

  currentValue_avg_filter =  filterVal(currentValue_avg,currentValue_avg_before,alpha_current);
  currentValue_avg_before =  currentValue_avg_filter;
  
  Vdiv_Voltage_avg = Vdiv_Voltage_sum/numReadings;

    if (currentValue_avg < 0.2 )        // if off 
  {
    currentValue_avg_filter=0;
    InverterOffset = 0;
  }
  else 
  {
    InverterOffset = 10.96;
    
  }

  Vbat = Vdiv_Voltage_avg/Resistor_ratio;
  Vbat_filter = filterVal(Vbat,Vbat_before,0.1);
  Vbat_before = Vbat_filter;
  
  power = Vbat_filter*currentValue_avg_filter - InverterOffset;

  if(power <0)
  {
    power = 0;
  }
  









  Serial.print(Time);
  Serial.print(",");
  Serial.print(Vbat_filter,3);
  Serial.print(",");
  Serial.print(currentValue_avg_filter,3);
  Serial.print(",");
  Serial.print(power,3);
  Serial.println();


  
  numReadings=0;
  currentValue_sum=0;
  Vdiv_Voltage_sum=0;
  AverageTaken = false;

}


}
